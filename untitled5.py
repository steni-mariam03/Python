# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/PranavPK18/Python/blob/main/Untitled5.ipynb

Ex. 1 Validation Exception
"""

class ValidationException(Exception):
    def __init__(self, message):
        super().__init__(message)

def validate_file(filename):
    with open(filename, 'r') as file:
        next(file)  # Skip the header line
        for line in file:
            parts = line.strip().split(',')
            if len(parts) != 2:
                continue  # skip malformed lines

            mileage_str = parts[1].strip()

            # Check if mileage is a valid integer
            if not mileage_str.isdigit():
                raise ValidationException(f"Invalid mileage:  {mileage_str}")

def ex1():
    try:
        validate_file("input.txt")
    except ValidationException as ve:
        print(ve)

ex1()

"""Ex. 2 Total Gym Visits"""

def find_total_visits():
    total_visits = 0
    file_names = ["week-1.csv", "week-2.csv", "week-3.csv"]

    for filename in file_names:
        with open(filename, "r") as file:
            lines = file.readlines()
            for line in lines[1:]:  # Skip the header
                parts = line.strip().split(",")
                visits = parts[1:]  # Skip the name
                total_visits += sum(int(v.strip()) for v in visits)

    return total_visits

def ex2():
    total = find_total_visits()
    print(f"Total visits: {total}.")

ex2()

"""Ex. 3 Word Counter I/O"""

def count_words(filename):
    small_words = set()
    large_words = set()

    with open(filename, 'r') as file:
        text = file.read()
        words = text.split()

        for word in words:
            if len(word) < 3:
                small_words.add(word)
            else:
                large_words.add(word)

    # Write small words to file
    with open("small-words.txt", "w") as sw_file:
        for word in sorted(small_words):
            sw_file.write(word + "\n")

    # Write large words to file
    with open("large-words.txt", "w") as lw_file:
        for word in sorted(large_words):
            lw_file.write(word + "\n")

    # Print to console
    print("large-words.txt:\n")
    for word in sorted(large_words):
        print(word)
    print("\nsmall-words.txt:\n")
    for word in sorted(small_words):
        print(word)

    # Return count of unique words
    return len(small_words.union(large_words))

def ex3():
    total_words = count_words("words.txt")
    print(f"\nTotal words: {total_words}.")

ex3()

"""Ex. 4 Calculator Log S3"""

import boto3

def calculate():
    log = []
    student_id = "123456"  # Replace with your actual student ID
    filename = f"calculator-log-{student_id}.txt"
    bucket_name = "my-calculator-logs"  # Replace with your actual bucket name

    while True:
        first = input("Enter first number: ").strip()
        if first.lower() == 'q':
            break
        second = input("Enter second number: ").strip()

        try:
            num1 = int(first)
            num2 = int(second)
            result = num1 + num2
            line = f"{num1} + {num2} = {result}"
            print(line)
            log.append(line)
        except ValueError:
            print("Invalid input. Please enter integers or 'q' to quit.")

    # Write log to file
    with open(filename, "w") as f:
        for entry in log:
            f.write(entry + "\n")

    # Upload to S3
    s3 = boto3.client("s3")
    try:
        s3.upload_file(Filename=filename, Bucket=bucket_name, Key=filename)
        print("*** Uploaded to S3 ***")
    except Exception as e:
        print("Failed to upload to S3:", e)

!pip install boto3

def ex4():
    calculate()

ex4()

"""Ex. 5 Car List"""

from pprint import pprint

def build_car_list():
    car_list = []

    # Step 1: Read mileage data
    mileage_data = {}
    with open("input.txt", "r") as file:
        next(file)  # skip header
        for line in file:
            parts = line.strip().split(",")
            if len(parts) != 2:
                continue
            car_id_str, miles_str = parts
            try:
                car_id = int(car_id_str.strip())
                miles = int(miles_str.strip())  # this will raise if not a valid int
                mileage_data[car_id] = miles
            except ValueError:
                continue  # skip invalid mileage

    # Step 2: Read car model data
    car_models = {}
    with open("car-ids.txt", "r") as file:
        for line in file:
            parts = line.strip().split(",")
            if len(parts) != 2:
                continue
            car_id_str, model = parts
            try:
                car_id = int(car_id_str.strip())
                car_models[car_id] = model.strip()
            except ValueError:
                continue

    # Step 3: Merge data
    for car_id, miles in mileage_data.items():
        if car_id in car_models:
            car_list.append({
                'id': car_id,
                'miles': miles,
                'model': car_models[car_id]
            })

    return car_list

def ex5():
    car_list = build_car_list()
    pprint(car_list)

ex5()